using API.Data;
using API.DTOs.StockDtos;
using API.Entities;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Controllers
{
    public class StockController : BaseApiController
    {
        private readonly StoreContext _context;
        private readonly IMapper _mapper;
        public StockController(StoreContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        [Authorize(Roles = "Admin, Asset")]
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Stock>>> GetStocks()
        {
            var stocks = await _context.Stocks
                .ToListAsync();

            return stocks;
        }

        [Authorize(Roles = "Admin, Asset")]
        [HttpGet("{id}", Name = "GetStock")]
        public async Task<ActionResult<Stock>> GetStock(int id)
        {
            var stock = await _context.Stocks.FirstOrDefaultAsync(a => a.Id == id);

            if (stock == null)
            {
                return NotFound();
            }

            return stock;
        }


        [Authorize(Roles = "Admin, Asset")]
        [HttpPost]
        public async Task<ActionResult<Stock>> AddStock(CreateStockDto createStockDto)
        {
            var stock = new Stock
            {
                Type = createStockDto.Type,
                Total = createStockDto.Total
            };

            _context.Stocks.Add(stock);
            await _context.SaveChangesAsync();

            // The ID will be automatically generated by the database
            return CreatedAtRoute("GetStock", new { id = stock.Id }, stock);
        }


        [Authorize(Roles = "Admin, Asset")]
        [HttpPut("EditStock")]
        public async Task<IActionResult> UpdateStock(UpdateStockDto stockDto)
        {
            var stock = await _context.Stocks.FindAsync(stockDto.Id);

            if (stock == null)
            {
                return NotFound();
            }

            _mapper.Map(stockDto, stock);

            var result = await _context.SaveChangesAsync() > 0;

            if (result)
            {
                return NoContent();
            }

            return BadRequest(new ProblemDetails { Title = "Problem Edit Stock" });
        }



    }
}